# Максимален брой върхове в графа
MAXN = 200

# Брой върхове в графа
n = 14

# Обхождане в дълбочина с начало връх v
v = 1

# Матрица на съседство на графа
# 1  2  3  4  5  6  7  8  9 10 11 12 13 14 
A = [
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2 
    [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # 4
    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],  # 6
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],  # 9
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],  # 11
    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]   # 14
]

# Индексите на обходените върхове са индекси на масива,
# а там където върха е обходен слагаме 1
used = [0] * MAXN

# Печат на обходнените върхове
def print_used():
    print("\n1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14")
    for i in range(n):
        print(f"{used[i]}, ", end="")
    print("\n")

# Обхождане в дълбочина от даден връх
def DFS(i, level):
    used[i] = 1  # Отбелязваме, че сме обходили i-я връх, като в съответния индекс слагаме 1
    
    print(f"\nDepth first Search of node={i+1} and level={level}")
    print_used()
    
    for k in range(n):
        if A[i][k] and not used[k]:
            DFS(k, level + 1)  # Пускаме функцията рекурсивно

def main():
    # Инициализация на масив used[], който съдържа всички посетени върхове
    # В този масив индекс+1 отговаря на номера на върха
    # 1 - посетен
    # 0 - не е посетен
    for k in range(1, n):
        used[k] = 0
    
    print("Initial values of used[]:")
    print_used()
    
    DFS(v-1, 0)
    print("\n")

if __name__ == "__main__":
    main()
