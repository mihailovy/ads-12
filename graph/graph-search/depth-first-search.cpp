#include <stdio.h>

/* Максимален брой върхове в графа */
#define MAXN 200

/* Брой върхове в графа */
const unsigned n = 14;

/* Обхождане в дълбочина с начало връх v */
const unsigned v = 6;

/* Матрица на съседство на графа */
// 1  2  3  4  5  6  7  8  9 10 11 12 13 14 
const char A[MAXN][MAXN] = {
  {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 1
  {1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 2 
  {0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, // 3
  {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, // 4
  {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, // 5
  {0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0}, // 6
  {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0}, // 7
  {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, // 8
  {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1}, // 9
  {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0}, //10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0}, //11
  {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, //12
  {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}, //13
  {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0}  //14
};

 // Индексите на обходените върхове са индекси на масива,
 // а там където върха е обходен слагаме 1
char used[MAXN];

// Печат на обходнените върхове
void printUsed() {
  unsigned i;
  
  printf("\n");
  printf("1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14\n");
  for (i = 0; i < n; i++) {
    printf("%u, ", used[i]);
  }
  printf("\n");
}

/* Обхождане в дълбочина от даден връх */
void DFS(unsigned i, unsigned level) {
  unsigned k;
  used[i] = 1; // Отбелязваме, че сме обходили i-я връх, като в съответния индекс слагаме 1
  
  printf("\n");
  printf("Depth first Search of node=%u and level=%u \n", i+1, level);

  printUsed();
  for (k = 0; k < n; k++) {
    if (A[i][k] && !used[k]) {
      if (!used[k]) {
        //printf(" Mark #%u as used ", k+1);
      }
      // Ако съществува елемент A[i][k] и ако в матрицата има 1 и ако не е обходен
      DFS(k, level + 1); // Пускаме функцията рекурсивно
    } else {
       //printf(" No link (%u, %u) ", i+1, k+1);
    }
  }
}

int main(void) {
  unsigned k;
  
  // Инициализация на масив used[], който съдържа всички посетени върхове
  // В тоз имасив индекс+1 отговаря на номера на върха
  // 1 - постен
  // 0 - не е посетен
  for (k = 1; k < n; k++) {
    used[k] = 0;
  }
  
  printf("Initial values of used[]: \n");
  printUsed();
   
  // printf("Depth first Search of node %u: \n", v);
  DFS(v-1, 0);
  printf("\n");
  return 0;
}
